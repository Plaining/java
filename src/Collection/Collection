――敬皇天后土，愿诸天神魔，善待我袍泽灵
Collection类的方法:
单元素添加、删除操作
Boolean add(Object o);将对象添加给容器
Boolean remove(Object o);如果容器中有与o相匹配的对象，则删除对象o
查询操作
int size();返回当前容器中元素的个数
Boolean isEmpty();判断容器中是否有任何元素
Boolean contains(Object o);查找容器中是否含有对象o
Iterator iterator();返回一个迭代器，用来访问容器中的各个元素
组操作：作用于元素组或者整个容器
Boolean containsAll(Collection c);查找容器中是否含有容器c中所有元素
Boolean addAll(Collection c);将容器c中所有元素添加给改容器
void clear();删除容器中所有元素
void removeAll(Collection c);从容器中删除容器c中的所有元素
void retainAll(Collection c);从容器中删除容器c中不包含的元素
Collection转换为Object数组
Object[] toArray();返回一个内含容器中所有元素的array
Object[] toArray(Object[] a);返回一个内含容器中所有元素的array,运行期返回的array和参数a的类型相同，需要转换为正确类型

List接口继承了Collection接口，定义一个允许重复项的有序集合。添加了面向位置的操作
List中搜索元素可以从列表的头部或者尾部开始
面向位置的操作：(插入某个元素或者Collection的功能)
void add(int index,Object obj);在指定位置index上添加obj
Boolean addAll(int index,Collection c);将容器c的所有元素添加在指定位置index
Object get(int index);返回List中指定位置的元素
int indexOf(Object o);返回第一个出现元素o的位置，否则返回-1
int lastIndexOf(Object o);返回最后一个出现元素o的位置，否则返回-1
Object remove(int index);删除指定位置上的元素
Object set(int index,Object obj);用元素obj取代index位置上的元素，并返回旧的元素
List接口不但能以位置序列迭代遍历整个列表，而且还能处理集合的子集
ListIterator listIterator();返回一个列表迭代器，用来访问列表中的元素
ListIterator listIterator(int index);返回一个列表迭代器，用来从指定index位置开始访问列表中的元素
List subList(int beginIndex,int endIndex);返回从指定beginIndex(包含)到endIndex(不包含)位置范围内各个元素的列表
						范围内各个元素的列表视图：对子列表的更改对底层List也有影响。

两种list实现：ArrayList和LinkedList
LinkedList类:增加了一些处理列表两端元素的方法
void addFirst(Object obj);将对象obj添加到列表的开头
void addLast(Object obj);将对象obj添加到列表的结尾
Object getFirst();返回列表开头的元素
Object getLast();返回列表结尾的元素
Object removeFirst();删除并且返回列表开头的元素
Object removeLast();删除并且返回列表结尾的元素
LinkedList();构建一个空的链接列表
LinkedList(Collection c);构建一个链接列表，并且添加集合c的所有元素
Arraylist类：封装了一个动态再分配的Object[]数组，每个ArrayList对象有一个数值，这个数值用来表示存储列表中元素的数组的容量。
void ensureCapacity(int minCapacity)将ArrayList对象容量增加minCapacity
void trimToSize();整理ArrayList对象容量为列表当前大小;程序可以使用这个操作减少ArrayList对象存储空间

Set接口集成Collection接口，而且它不允许集合中存在重复项，每个具体的Set实现类依赖添加对象的equals()方法来检查唯一性，Set接
口没有引入新方法，因此Set就是一个Collection，只不过行为不同
1、SortedSet接口
	保持元素的有序顺序，将元素添加到SortedSet类必须实现Comparable接口，否则必须为它的构造函数提供一个Comparator接口的实
	现。TreeSet类是它的唯一一个实现。
	集合必须包含唯一的项，如果添加元素时比较两个元素导致了“0”返回值（通过Comparable的compareTo()方法或者Comparator的
	compare()方法），那么新元素就没有添加进去；如果两个元素相等，还比较好处理；但是如果二者不想等，就应该修改比较方法，使比较
	方法与equals()的效果一致。
	SortedSet类的方法：
		Comparator comparator();返回对元素进行排序时使用的比较器，如果使用Comparable接口的compareTo()方法对元素进行比
		较，则返回null;
		Object first();返回有序集合中第一个（最低）元素
		Object last();返回有序集合中最后一个（最高）元素
		SortedSet subSet(Object beginElement,Object endElement);返回从beginElement(包括)至endElement(不包
		括)范围内元素的SortedSet视图（子集）
		SortedSet headSet(Object endElement);返回SortedSet的一个试图（子集）,其内各元素都小于endElement
		SortedSet tailSet(Object beginElement);返回SortedSet的一个试图（子集）,其内各元素都大于或者等于beginElement
2、HashSet类和TreeSet类
	创建要添加到HashSet中的类时，要记住编写覆盖HashCode()和equals()的方法
	1、HashSet类
	HashSet是为快速查找而设计的Set,存入HashSet的对象必须定义hashCode()。
	HashSet();构建一个空的哈希表
	HashSet(Collection c);构建一个哈希表，并添加集合c中所有元素
	HashSet(int initCapacity);构建一个拥有特定容量的空哈希表
	HashSet(int initCapacity,float loadFactor);构建一个拥有特定容量和加载因子的空哈希表。